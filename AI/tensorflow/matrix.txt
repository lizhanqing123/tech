#!/usr/bin/python
import tensorflow as tf
import random
import os
import sys

if len(sys.argv) < 2:
	print "param error"
	os.exit(1)

print sys.argv[1]

random.seed()

x = tf.placeholder( tf.float32 )

yTrain = tf.placeholder( tf.float32 )

w1 = tf.Variable( tf.random_normal( [4,8], mean=0.5, stddev = 0.1), tf.float32 )
b1 = tf.Variable( tf.zeros( [1,8] ), tf.float32 )

xr = tf.reshape( x, [1,4] )

n1 = tf.nn.tanh(tf.matmul(xr, w1) + b1)

w2 = tf.Variable( tf.random_normal( [8,2], mean=0.5, stddev = 0.1), tf.float32 )
b2 = tf.Variable( tf.zeros( [1,2] ), tf.float32 )

n2 = tf.matmul(n1,w2) + b2

y = tf.nn.softmax( tf.reshape(n2, [2]) )

loss = tf.reduce_mean( tf.square( y - yTrain ))

optimizer = tf.train.RMSPropOptimizer( 0.01 )

train = optimizer.minimize( loss )

sess = tf.Session()

path = './aidata/matrix'

sess.run( tf.global_variables_initializer() )

if os.path.exists( path + ".index"):
	print 'load trained data'
	tf.train.Saver().restore(sess, path )
else:
	print 'no trained data training from begin'


right = 0
total = int(sys.argv[1])

for i in range(total):
	xDataRandom = [ int( random.random() * 10), int( random.random() * 10), int( random.random() * 10), int( random.random() * 10)]
	if xDataRandom[2] % 2 == 0:
		yTrainRandom = [0, 1] #female
	else:
		yTrainRandom = [1, 0] #male
	
	result = sess.run( [ train, x, yTrain, y, loss], feed_dict = { x : xDataRandom , yTrain : yTrainRandom } )

	if  (result[3][0] > result[3][1] and yTrainRandom[0] == 1) or ( result[3][0] < result[3][1] and yTrainRandom[0] == 0 ):
		print "right"
		if i >= total - 100:
			right = right + 1
	else:
		print "wrong"
		print yTrainRandom
		print result[3]

if total > 100:
	print "final right is %d, is %10.10f" % ( right, float(right)/float( 100 ) )
else:
	print "final right is %d, is %10.10f" % ( right, float(right)/float( total ) )
			

print "save to " + path
tf.train.Saver().save(sess, path)

