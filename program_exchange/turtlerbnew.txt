//------------------------------------------------------------------------
// 简称: turtletest
// 名称: turtletest
// 类别: 公式应用
// 类型: 用户应用
//------------------------------------------------------------------------

Params
	Numeric avgn(56);
	Numeric n3(6);
	Numeric openlimit(52);
	Numeric nLength(5);
	Numeric openbuy(1);
	Numeric closelimit(17);
Vars
	Numeric highest20;
	Numeric lowest20;
	Numeric highest18;
	Numeric lowest18;
	Numeric highest55;
	Numeric lowest55;
	Numeric highest6;
	Numeric lowest6;
	Numeric highest5;
	Numeric lowest5;
	Numeric highest2;
	Numeric lowest2;
	Numeric highest3;
	Numeric lowest3;
	Numeric highest7;
	Numeric lowest7;
	Numeric highest4;
	Numeric lowest4;
	Numeric volume;
	Series<Numeric> avg5;
	Series<Numeric> avgspec;
	Series<Numeric> avgspec1;
	Series<Numeric> avgspec2;
	Series<Numeric> avg9;
	Series<Numeric> avg10;
	Series<Numeric> avg20;
	Series<Numeric> avg30;
	Series<Numeric> avg55;
	Numeric highestopen;
	Numeric lowestopen;
	
	Numeric highestopen2;
	Numeric lowestopen2;
	
	Numeric breakline;
	Numeric biaslimit;
	Numeric avgcount;
	Numeric count;
	Series<Numeric> countserices;
	Numeric i;
	Numeric MinPoint;
	Series<Numeric> diff(0);
	Series<Numeric> dea(0);
	Series<Numeric> ema1(0);
	Series<Numeric> ema2(0);
	Numeric sellprice;
	Series<Numeric> lastopen;
	Series<Numeric> lastsucc;
	Series<Numeric> maxpoint;
	Numeric stoploss;
	Numeric buycond;
	Numeric buyrate;
	Bool breakcond;
	Bool breakcond2;
	Series<Numeric> overserices;
Events

	OnBar(ArrayRef<Integer> indexs)
	{
	lastopen = lastopen[1];
	lastsucc = lastsucc[1];
	maxpoint = maxpoint[1];
	overserices = overserices[1];
	Commentary( "last succesful=" + Text(lastsucc) );
	Commentary( "last max point=" + Text(maxpoint[1]) );
	//biaslimit = openlimit;
	biaslimit = openlimit + (Close[1] - openlimit*57)/(openlimit*5.7);

	highest20 = HighestFC(High[1],20);
	lowest20 = LowestFC(Low[1],20);
	
	highest18 = HighestFC(High[1],18);
	lowest18 = LowestFC(Low[1],18);
	
	highest6 = HighestFC(High[1],6);
	lowest6 = LowestFC(Low[1],6);
	
	highest5 = HighestFC(High[1],5);
	lowest5 = LowestFC(Low[1],5);
	
	highest4 = HighestFC(High[1],4);
	lowest4 = LowestFC(Low[1],4);
	
	highest3 = HighestFC(High[1],3);
	lowest3 = LowestFC(Low[1],3);
	
	highest2 = HighestFC(High[1],2);
	lowest2 = LowestFC(Low[1],2);
	
	highest7 = HighestFC(High[1],7);
	lowest7 = LowestFC(Low[1],7);
	

	highestopen = HighestFC(High[1], n3);
	lowestopen = LowestFC(Low[1], n3);
	
/* 	highestopen2 = HighestFC(High[1], n4);
	lowestopen2 = LowestFC(Low[1], n4); */
	
	
	
	avg55 = AverageFC(Close,avgn);
	
	avg5 = AverageFC(Close,3);
	avgspec = AverageFC(Close,7);
	
	avg9 = AverageFC(Close,9);
	
	avg10 = AverageFC(Close,10);
	avg20 = AverageFC(Close,20);
	avg30 = AverageFC(Close,26);
	avg55 = AverageFC(Close,avgn);
	diff=xaverage(open,9)-xaverage(open,45); //value1是9周期指数移动平均减去45周期指数移动平均
	dea=xaverage(diff,2); //bias1是value1的2周期平均

	ema1=xaverage(open,9);
	ema2=xaverage(open,45);
	
	PlotNumeric( "avg55", avg55 );
	PlotNumeric( "avg20", avg20 );
	PlotNumeric( "avg5", avg5 );
	PlotNumeric( "avg10", avg10 );
	avgcount = 0;
	count = 0;
	i = 1;
	breakline = 0;
	volume = 10;
	
		if (avg5[1] > avg20[1])
	{
		if (countserices[1] > 0)
		{
			countserices = countserices[1] + 1;
		}
		Else
		{
			countserices = 1;
		}
	}
	Else if (avg5[1] < avg20[1])
	{
		if (countserices[1] < 0)
		{
			countserices = countserices[1] - 1;
		}
		Else
		{
			countserices = -1;
		}
	}
	
	if (Close[1] > avg55[1])
	{
		if (overserices[1] > 0)
		{
			overserices = overserices[1] + 1;
		}
		Else
		{
			overserices = 1;
		}
		if (avg5[1] > avg10[1])
		{
			avgcount = avgcount + 4;
		}
		if (avg5[1] > avg20[1])
		{
			avgcount = avgcount + 2;
		}
		if (avg10[1] > avg20[1])
		{
			avgcount = avgcount + 3;
		}
		if (avg20[1] > avg30[1])
		{
			avgcount = avgcount + 3;
		}
		if (avg20[1] > avg20[2])
		{
			avgcount = avgcount + 2;
		}
		if (avg10[1] > avg10[2])
		{
			avgcount = avgcount + 1;
		}
		if (avg10[1] > avg10[2])
		{
			if (avg10[1] > avg10[2])
			{
				count = countserices;
			}
		}
	}
	Else if (Close[1] < avg55[1] )
	{
		if (overserices[1] < 0)
		{
			overserices = overserices[1] - 1;
		}
		Else
		{
			overserices = -1;
		}
		if (avg5[1] < avg10[1])
		{
			avgcount = avgcount - 4;
		}
		if (avg5[1] < avg20[1])
		{
			avgcount = avgcount - 2;
		}
		if (avg10[1] < avg20[1])
		{
			avgcount = avgcount - 3;
		}
		if (avg20[1] < avg30[1])
		{
			avgcount = avgcount - 3;
		}
		if (avg20[1] < avg20[2])
		{
			avgcount = avgcount - 2;
		}
		if (avg10[1] < avg10[2])
		{
			avgcount = avgcount - 1;
		}
		if (avg10[1] < avg10[2])
		{
			if (avg10[1] < avg10[2])
			{
				count = countserices;
			}
		}
	}
	Commentary( "over series=" + Text(overserices) );
	MinPoint = 1*MinMove*PriceScale;
	if (MarketPosition == 0)
	{
		if (Close[1] > avg55[1] )
		{ 
			if ( avgcount >= 12  || count >= nLength  )
			{
				breakline = highestopen;
				buycond = 3;
			}
			else 
			{ 
				if (highest20 - highest18 > openlimit * 0.3)
				{
					breakline = highest18;
					buycond = 4;
				}
				Else
				{ 
					breakline = highest20;
					buycond = 5;
				}
			}
			biaslimit = biaslimit*0.8;
			if (Abs(breakline - highest20) < 0.5)
			{
				biaslimit = biaslimit*1.05;
			} 
			if ( openbuy == 1 && ema1[1]>ema2[1] and dea[3]>dea[2] and dea[2] <dea[1] and Abs(Close[1] - avg20[1]) < biaslimit*1.1 and (avgcount >= 11 || count >= nLength)  and Close[1] > avg5[1] && BarsSinceExit >= 3 )
			{ 
				volume = volume * 1.3;
				if (CurrentBar - lastopen < 10)
				{
					volume = volume*0.9;
				}
				buycond = 1;
			    Buy( volume, open );
			    FileAppend( "D:\\tblog\\tb.log", "Buy In " + Text(buycond));
				maxpoint = High;
				lastopen[0] = CurrentBar;	
				
			}
			Else
			{
				if ( openbuy == 1 and avgspec[12] < avgspec[12+1] and avgspec[12] < avgspec[12-1] and (avgcount >= 9)  and Close[1] > avg5[1]  && BarsSinceExit >= 3  )
				{ 
					 breakline = max(High[1], High[2]);
				 	 buycond = 2;
				} 
				else if (openbuy == 1 and (avg5[6] > avg9[6] and avg5[6+1] < avg9[6+1]) and (avg5[6+8] < avg9[6+8] and avg5[6+8+1] > avg9[6+8+1]) and BarsSinceExit >= 1)
				{
					 breakline = max(max(High[1], High[2]),max(High[3], High[4]));
				 	 buycond = 22;
				}
				buyrate = 1;
				breakcond = !( CurrentBar - lastopen < 8 && BarsSinceExit < 2);
				if ( breakline > 0 && Abs(breakline - avg20[1]) < biaslimit  && breakline > avg20[1]  && High > breakline && breakcond )
				{
 					if (Close[2] < avg55[2] && BarsSinceExit < 9 && Close[7] < avg55[7] )
					{
						volume = volume * 0.1;
						buyrate = 0.1;
					}
					else if (CurrentBar - lastopen < 15 && Close[1] - avg20[1] > 0.4*biaslimit && BarsSinceExit < 7 )
					{
 						volume = volume * 0.4;
 						buyrate = 0.4;
					} 
					else if (CurrentBar - lastopen < 10)
					{
						volume = volume * 0.9;
						buyrate = 0.9;
					}
				
					Buy( volume, Max(breakline + MinPoint,open));
					FileAppend( "D:\\tblog\\tb.log", "Buy In " + Text(buycond));
					FileAppend( "D:\\tblog\\tb.log", "Buy Rate " + Text(buyrate));
					maxpoint = High;
					lastopen[0] = CurrentBar;
				} 
			}
		}
		else if (Close[1] < avg55[1] )
		{
			if (avgcount <= -12 || count <= (0-nLength) )
			{
				breakline = lowestopen;
				buycond = 3;
			}
			else
			{ 
				if (Abs(lowest20 - lowest18) > openlimit * 0.3)
				{
					breakline = lowest18;
					buycond = 4;
				}
				Else
				{ 
					breakline = lowest20;
					buycond = 5;
				} 
			}
			biaslimit = biaslimit*1.05;
			if (Abs(breakline - lowest20) < 0.5)
			{
				biaslimit = biaslimit*1.05;
			} 
			if ( openbuy == 1 && ema1[1]<ema2[1] and dea[3]<dea[2] and dea[2] >dea[1] and Abs(Close[1] - avg20[1]) < biaslimit*1.1 and (avgcount <= -11 || count <= (0-nLength)) and Close[1] < avg5[1] && BarsSinceExit >= 3)
			{
				volume = volume * 1.3;
				if (CurrentBar -lastopen < 10)
				{
					volume = volume * 0.9;
				}
				buycond = 1;
				Sellshort (volume,open);
				FileAppend( "D:\\tblog\\tb.log", "Buy In " + Text(buycond));
				maxpoint = Low;
				lastopen[0] = CurrentBar;
			}
			Else
			{
				if ( openbuy == 1  and avgspec[12+1] < avgspec[12] and avgspec[12] > avgspec[12-1]  and ( avgcount <= -9 ) and Close[1] < avg5[1]  && BarsSinceExit >= 3 )
				{
					 breakline = min(Low[1], Low[2]);
					 buycond = 2;
				}
				else if(openbuy == 1  and (avg5[6] < avg9[6] and avg5[6+1] > avg9[6+1]) and (avg5[6+8] > avg9[6+8] and avg5[6+8+1] < avg9[6+8+1]) and BarsSinceExit >= 1)
				{
					breakline = min(min(Low[1], Low[2]),min(Low[3], Low[4]));
					buycond = 22;
				}
				breakcond = !( CurrentBar - lastopen < 8 &&  BarsSinceExit < 2);
				if  (  breakline > 0 && avg20[1] - breakline < biaslimit && breakline < avg20[1] && Low < breakline and breakcond )
				{
					buyrate = 1;
					if (Close[2] > avg55[2] && BarsSinceExit < 9 && Close[7] > avg55[7])
					{
						volume = volume * 0.1;
						buyrate = buyrate * 0.1;
					} 
					else  if (CurrentBar - lastopen < 15 && avg20[1] - Close[1] > 0.4*biaslimit && BarsSinceExit < 7 )
					{
 						volume = volume * 0.4;
 						buyrate = buyrate * 0.4;
					} 
					else if (CurrentBar - lastopen < 10)
					{
						volume = volume * 0.9;
						buyrate = buyrate * 0.9;
					}
					
					SellShort( volume, Min(breakline - MinPoint, open));					
					FileAppend( "D:\\tblog\\tb.log", "Buy In " + Text(buycond));
					FileAppend( "D:\\tblog\\tb.log", "Buy Rate " + Text(buyrate));
					maxpoint = Low;
					lastopen[0] = CurrentBar;
				} 
			}
		}
	}
	else if (MarketPosition == 1)
	{
		if (High > maxpoint)
		{
			maxpoint = High;
		}
		sellprice = 0;
		if ( (Weekday == 1 || Abs(Day[0] - Day[1]) > 2) && Hour == 9 && Close[1] - avg20[1] > 68 && Close[1] - Open > 2*MinPoint )
		{
			Sell( 0, Open );
		}
		else if ( Close[1] - avg20[1] > 74 && Close[1] - Open > 7*MinPoint )
		{
			Sell( 0, Open );
		}
		else if (High - avg20[1] > 8.7*closelimit && High - Max(Open, Close) > 0.36*closelimit )
		{
			sellprice = High-0.36*closelimit;
			lastsucc = 1;
			Sell( 0, sellprice - MinPoint );
		}
		else if (High - avg20[1] > 6*closelimit && High - Max(Open, Close) > 1.59*closelimit )
		{
			sellprice = High-1.59*closelimit;
			lastsucc = 1;
			Sell( 0, sellprice - MinPoint );
		}
		else if (High[1] - avg20[1] > closelimit*6.25 || High[2] - avg20[2] > closelimit*6.25 || High[3] - avg20[3] > closelimit*6.25 || High[4] - avg20[4] > closelimit*6.25  || High[5] - avg20[5] > closelimit*6.25 )
		{
			sellprice = Max(avg5[1],Low[1]);
		} 
		else if (Close[1] < Close[2] && Close[2] < Close[3] && Close[3] < Close[4]  && Close[4] < Close[5] )
		{ 
			sellprice = Max(avg5[1],Low[1]);
		}
		else if ( (Low[1] - AvgEntryPrice > 2.9*closelimit || Low[1] - avg20[1] > 3.7*closelimit ) && Open[1] - Close[1] > 0.45*closelimit )
		{
			sellprice = Low[1];
		}
		else if (Close[1] < Low[2] and maxpoint - Low[1] > 27 && BarsSinceEntry > 10)
		{
			sellprice = Low[1];
		}
		 else if (Close[1] < min(Low[2],Low[3]) and maxpoint - Low[1] > 18 && BarsSinceEntry > 12)
		{
			sellprice = Low[1];
		} 
		else if ( Close[1] > Close[2] && Close[2] > Close[3] && Close[3] > Close[4] && Close[4] > Close[5] && Close[5] > Close[6]  &&  Close[1] - avg20[1] > closelimit * 3.1 )
		{ 
			sellprice = lowest2;
		}  
		else if ( BarsSinceLastEntry < 4 &&  (High[1] - avg20[1] >  closelimit*3.5  || High[2] - avg20[2] >  closelimit*3.5)  )
		{
			sellprice = lowest2;
		}
		else if ( lowest2 - lowest3 > closelimit && Open[1] - Close[1] > 0.7*closelimit )
		{
			sellprice = lowest2;
		}
		else if (High[1] - avg20[1] >  closelimit*5.35 || High[2] - avg20[2] >  closelimit*5.35 || High[3] - avg20[3] >  closelimit*5.35 )
		{
			sellprice = lowest3;
		} 
		else if ( (High[1] - avg20[1] >  closelimit*4.2 || High[2] - avg20[2] >  closelimit*4.2 || High[3] - avg20[3] >  closelimit*4.2) && Close[1] - AvgEntryPrice > closelimit*3.7 )
		{
			sellprice = lowest3;
		}
		else if ( Close[1] - AvgEntryPrice > closelimit* 1.6 && lowest3 - lowest4 > closelimit*0.3 )
		{
			sellprice = lowest3;
		}
		else if ( lowest3 - lowest4 > 0.7*closelimit && Open[1] - Close[1] > 1.25*closelimit )
		{
			sellprice = lowest3;
		} 
		else if ( Close[1] - AvgEntryPrice > closelimit*3.75 )
		{
			sellprice = lowest4;
		}
		else if ( BarsSinceLastEntry < 4  && Close[1] - avg20[1] >  closelimit * 0.9)
		{
			sellprice = lowest4;
		}
		else if (Close[1] < avg20[1] && avg5[1] < avg20[1] )
		{
			sellprice = lowest4;
		} 
		else if ( lowest4 - lowest5 > 0.8*closelimit && Open[1] - Close[1] > 0.8*closelimit )
		{
			sellprice = lowest4;
		}
 		else if (Close[1] < Low[BarsSinceEntry] && BarsSinceEntry > 3 )
		{
			sellprice = lowest5;
		} 
		else if ( Close[1] - AvgEntryPrice > closelimit && Close[1] < avg10[1] )
		{
			sellprice = lowest5;
		}
		else if (avg5[1] < avg10[1] && Close[1] < avg10[1] )
		{
			sellprice = lowest5;
		} 
		else if ( lowest5 - lowest6 > 0.5*closelimit  && Open[1] - Close[1] > 0.45*closelimit )
		{
			sellprice = lowest5;
		} 
		else if (highest6 - lowest7 < 2.15*closelimit )
		{
			sellprice = lowest7;
		}
		else if ( lowest5 - lowest6 > 0.75*closelimit )
		{
			sellprice = lowest5;
			if (lowest4 - lowest5 > 0.6*closelimit)
			{
				sellprice = lowest4;
			} 
			
		}
		Else
		{  
			sellprice = lowest6;
		}
		

		if ( sellprice < Low[BarsSinceEntry] && Low[BarsSinceEntry] < AvgEntryPrice - 10 && BarsSinceEntry > 4 && maxpoint - AvgEntryPrice < 2)
		{
			sellprice = Low[BarsSinceEntry];
		}
		else if ( sellprice < Low[BarsSinceEntry] && Low[BarsSinceEntry] < AvgEntryPrice - 26 && BarsSinceEntry > 6 )
		{
			sellprice = Low[BarsSinceEntry];
		}
		
		if  (Low < sellprice)
		{
			if ( Min(open, sellprice - MinPoint) > AvgEntryPrice)
			{
				lastsucc = 1;
			}
			Else
			{
				lastsucc = -1;
			}
			Sell( 0, Min(open, sellprice - MinPoint) );
			
		}
	}
	else if (MarketPosition == -1)
	{
		if (Low < maxpoint)
		{
			maxpoint = Low;
		}
		sellprice = 0;

		if ( (Weekday == 1 || Abs(Day[0] - Day[1]) > 2) && Hour == 9  && avg20[1] - Close[1] > 68 && Open - Close[1] > 2*MinPoint )
		{
			BuyToCover( 0, Open );
		} 
		else if ( avg20[1] - Close[1] > 74 && Open - Close[1] > 7*MinPoint )
		{
			BuyToCover( 0, Open );
		}
		else if (avg20[1] - Low > 8.7*closelimit && Min(Open, Close) - Low > 0.36*closelimit)
		{
			sellprice = Low + 0.36*closelimit;
			lastsucc = 1;
			BuyToCover( 0, sellprice + MinPoint );
		}
		else if (avg20[1] - Low > 6*closelimit && Min(Open, Close) - Low > 1.59*closelimit)
		{
			sellprice = Low + 1.59*closelimit;
			lastsucc = 1;
			BuyToCover( 0, sellprice + MinPoint );
		}
		else if ((avg20[1] - Low[1]) > closelimit*6.25 || (avg20[2] - Low[2]) > closelimit*6.25 || (avg20[3] - Low[3]) > closelimit*6.25 || (avg20[4] - Low[4]) > closelimit*6.25  || (avg20[5] - Low[5]) > closelimit*6.25 )
		{
			sellprice = Min(avg5[1],High[1]);
		}
		else if (Close[1] > Close[2] && Close[2] > Close[3] && Close[3] > Close[4]  && Close[4] > Close[5]  )
		{ 
			sellprice = Min (avg5[1],High[1]);
		}
		else if ( (AvgEntryPrice - High[1] > 2.9*closelimit || avg20[1] - High[1] > 3.7*closelimit) && Close[1] -Open[1] > 0.45*closelimit )
		{
			sellprice = High[1];
		}  
		else if (Close[1] > High[2] and High[1] -maxpoint > 27 && BarsSinceEntry > 10)
		{
			sellprice = High[1];
		}
		else if (Close[1] > max(High[2],High[3]) and High[1] -maxpoint > 18 && BarsSinceEntry > 12)
		{
			sellprice = High[1];
		} 
 		else if ( Close[1] < Close[2] && Close[2] < Close[3] && Close[3] < Close[4] && Close[4] < Close[5] && Close[5] < Close[6] &&  avg20[1] - Close[1] > 3.1* closelimit )
		{ 
			sellprice = highest2;
		}   
		else if ( BarsSinceLastEntry < 4 && (avg20[1] - Low[1] > closelimit*3.5  || (avg20[2] - Low[2]) > closelimit*3.5) )
		{
			sellprice = highest2;
		}
		else if ( highest3 - highest2 > closelimit && Close[1] - Open[1] > 0.7*closelimit )
		{
			sellprice = highest2;
		}
		else if ( ((avg20[1] - Low[1]) > closelimit*4.2 || (avg20[2] - Low[2]) > closelimit*4.2 || (avg20[3] - Low[3]) > closelimit*4.2) &&  AvgEntryPrice - Close[1] > closelimit * 3.7 )
		{
			sellprice = highest3;
		} 
		else if ((avg20[1] - Low[1]) > closelimit*5.35 || (avg20[2] - Low[2]) > closelimit*5.35 || (avg20[3] - Low[3]) > closelimit*5.35 )
		{
			sellprice = highest3;
		}
		else if ( AvgEntryPrice - Close[1] > closelimit* 1.6 && lowest4 - lowest3 > closelimit * 0.3 )
		{
			sellprice = highest3;
		} 
		else if ( highest4 - highest3 > 0.7*closelimit && Close[1] - Open[1] > 1.25*closelimit )
		{
			sellprice = highest3;
		}
		else if ( AvgEntryPrice - Close[1] > closelimit*3.75 )
		{
			sellprice = highest4;
		}
		else if ( BarsSinceLastEntry < 4 && Abs(Close[1] - avg20[1]) > closelimit*0.9)
		{
			sellprice = highest4;
		}
		else if (Close[1] > avg20[1] && avg5[1] > avg20[1] )
		{
			sellprice = highest4;
		}
		else if ( highest5 - highest4 > 0.8*closelimit && Close[1] - Open[1] > 0.8*closelimit )
		{
			sellprice = highest4;
		}
 		 else if (Close[1] > High[BarsSinceEntry] && BarsSinceEntry > 3 )
		{
			sellprice = highest5;
		}
		else if ( AvgEntryPrice - Close[1] > closelimit && Close[1] > avg10[1] )
		{
			sellprice = highest5;
		}
		else if (avg5[1] > avg10[1] && Close[1] > avg10[1] )
		{
			sellprice = highest5;
		}
		else if ( highest6 - highest5 > 0.5*closelimit && Close[1] - Open[1] >0.45*closelimit )
		{
			sellprice = highest5;
		}
		else if (Abs(lowest6 - highest7) < 2.15*closelimit)
		{
			sellprice = highest7;
		}   
		else if (highest6 - highest5 >0.75*closelimit)
		{
			sellprice = highest5;
			if (highest5 - highest4 > 0.6*closelimit)
			{
				sellprice = highest4;
			} 
			
			
		}
		Else
		{  
			sellprice = highest6;
		}
		
       if (sellprice > High[BarsSinceEntry] && High[BarsSinceEntry] > AvgEntryPrice + 10 && BarsSinceEntry > 4 && AvgEntryPrice - maxpoint < 2)
		{
			sellprice = High[BarsSinceEntry];
		}
		else if (sellprice > High[BarsSinceEntry] && High[BarsSinceEntry] > AvgEntryPrice + 26 && BarsSinceEntry > 6 )
		{
			sellprice = High[BarsSinceEntry];
		}
		
		if (High > sellprice)
		{
			if ( Max(open, sellprice + MinPoint) < AvgEntryPrice)
			{
				lastsucc = 1;
			}
			Else
			{
				lastsucc = -1;
			}
			BuyToCover( 0, Max(open, sellprice + MinPoint) );
		}
	}
	
	
}

//------------------------------------------------------------------------
// 编译版本	GS2015.12.25
// 用户版本	2018/12/07 21:09:03
// 版权所有	lizhanqing
// 更改声明	TradeBlazer Software保留对TradeBlazer平台
//			每一版本的TradeBlazer公式修改和重写的权利
//------------------------------------------------------------------------