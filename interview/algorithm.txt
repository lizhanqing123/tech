1.冒泡排序
关键点:第2层循环不要循环到底
void sort( int a[], int len )
{
    for( int i = 0; i<len; i++)
     for( j = 0; j<len - i - 1;j++)
     {   
        if (a[j] > a[j+1])
        {
           swap( a[j], a[j+1]);
        }
     }
}


2.字符串反转
char *invert( char *dest )
{
    int len = strlen(dest);
    for( int i = 0; i<len/2; i++)
    {
        swap( dest[i], dest[len-i-1]);
    }
    return dest;
}


3.atoi的实现:
关键点：每次之前的结果加乘10
int atoi( const char *p )
{
    int i = *p - '0';
    int sum = 0;
    int count = 1;
    for( char *q = p; q != '\0'; q++,count *= 10)
    {
        int tmp = q* - '\0';
        sum = sum*count + tmp * count;
    }
    return sum;
}



4.找到数组中第2大的数
int findsecond( char a[], int len)
{
    int first = max(a[0], a[1]);
    int second = min(a[0], a[1]);
    for( int i = 2; i<len; i++)
    {
        if (a[i] > first)
        {
            second = first;
            first = a[i];
        }
 	else if (a[i] > second)
        {
     	    second = a[i];
        }
    }
}


5.有序数组得到合并
void MergeArray( int a[], int len1, int b, int len2, int c[] )
{
    int i = 0;
    int j = 0;
    int k = 0;
    while (i<len1 && j<len2)
    {
        if (a[i] <= b[j])
        {
            c[k] = a[i];
            i++;
            k++;     
        }
        else
        {
            c[k] = b[j];
            j++;
            k++;
        }
    }
    if (i >= len1)
    {
        for( ; j<len2; j++,k++)
        {
             c[k] = b[j];
        }
    }
    else
    {
        for( ; i<len1; i++,k++)
        {
             c[k] = a[i];
             
        }
    }
}


6.判断2个一个链表是否有环
关键点：快指针和慢指针相遇
IsLoop( Node *head )
{
    Node *fast = head->next;
    Node *slow = head->next;
    while(fast->next && slow->next)
    {
        fast = fast->next->next;
        slow = slow->next;
        if (fast == slow)
        {
    	    return true;
        }     
    }
    return false;
}


7.二分法查找有序数组
关键点: mid = (low+high)/2;
int find(int n,int a[],int len)
{
    int low=0;
    int high=len-1;
    int mid=0;
    while(low<high)
    {
        mid=(low+high)/2;
       //find
       if(n==a[mid])
       {
            return mid;
       }
       else if(n>a[mid])
      {
          low=mid+1;
      }
      else
     {
       high=mid-1;
      }
    }
    return -1;
}

8.广度优先遍历2叉树
关键点:用队列
void tresevse( Node *root)
{
   queue.push( root );
   while(!queue.empty())
   {
       Node *p = queue.pop();
       print(p->data);
       queue.push(p->left);
       queue.push(p->right);
   }
}



9.单链表反转
关键点：3个指针，循环判断中间那根。
 ListNode* ReverseList(ListNode* pHead)
 {
     ListNode* pReversedHead = NULL;
     ListNode* pNode = pHead;
     ListNode* pPrev = NULL;
     while(pNode != NULL)
     {
         ListNode* pNext = pNode->m_pNext;
 
        if(pNext == NULL)
             pReversedHead = pNode;
 
         pNode->m_pNext = pPrev;
 
         pPrev = pNode;
         pNode = pNext;
     }
 
     return pReversedHead;
 }


 

10.求斐波纳数列第n个数的值
int Fabci( int n)
{
     if (n == 1 || n == 2)
     {
          return 1;
     }
     return Fabci(n-1) + Fabci(n-2);
}


11.钱币问题。有1，2，5，10元的钱币。求这些钱币拼凑成n元有多少种方法

void Money( int n, int &count )
{
 count = 0;
 int b1max = n/1;
 int b2max = n/2;
 int b3max = n/5;
 int b4max = n/10;
 for( int i = 0; i<b1max; i++)
   for( int j = 0; j<b2max; j++)
      for( int k = 0; k<b5max; k++)
          for( int m = 0; m<b10max; m++)
                  {
                       if (i+j*2+k*5+m*10 == n)
                       {
                           count++;     
                        }
                  }
 }


12.判断2个链表是否相交。
注意这里的相交不是相交一个节点，而是最后一段完全共用。
因此先出尾节点，如果尾节点相同，则相交。求尾节点过程中求出2个链表的长度，然后遍历第2次，长链表先走m-n步，m是长链表的长度，n是短链表的长度。
 



13.青蛙跳级问题
一个青蛙可以跳1级台阶。也可以跳2级台阶
问N级台阶。一共多少种跳法

int Jump( int n )
{
    if (n == 1 || n == 2)
    {
       return 1;
    }
    return Jump( n - 1) + Jump(n-2);
}



14.合并有序单链表
Node* merge( Node *head1; Node *head2 )
{
    Node *p1 = head1->next;
    Node *p2 = head2->next;
    Node *p = new Node;
    Node *head = p;
    while( p1 != NULL && p2 != NULL)
    {
       while(p1->data <= p2->data)
       {     
           p->next = p1;
           p = p1;
           p1 = p1->next;
       }
       Node *temp = p2;
       p2 = p1;
       p1 = temp;
    }
    if (p1)
    {
       p->next = p1;
    }
    else if (p2)
    {
       p->next = p2;
    }
    return head;
}



15.子串查找问题,求目标串中有多少个子串

bool IsCmpOK( const char *src; const char *dst )
{
     int len = strlen( dst );
     for( int i = 0; i<len; i++)
     {
        if (src[i] != dst[i])
        {
             return false;
        }
    }
    return true;       
}

int FindSubStr( const char *src, const char *dst )
{
    int count = 0;
    int len1 = strlen( src );
    int len2 = strlen( dst );
    for( int i = 0; i< len1 - len2;)
    {
        if (IsCmpOK( &src[i], dst))
        {
             count++;
             i = i+len2;       
        }
        else
        {
            i++;
        }
    }
    return count;
}


16.在一个字符串中找到第一个只出现一次的字符
思路：关键在如何定义辅助容器，由于字符是char.只有256种可能，因此可以将字符的asi码作为hash值。即定义一个大小256大小的数组，字符的ascii码就是
数组的索引,value就是出现的次数，
遍历第2遍时，第一次出现1的元素就是要找得字符



17.判断一颗树是否为平衡2叉树
关键：判断每一个节点都是平衡，整个树才是平衡二叉树
void Depth( Node *p )
{
   if (p->left == NULL && p->right == NULL)
   {
	 return 1;
   }
   int left = Depth( p->left );
   int right = Depth( p->right );
   return max(left, right)+1;   
}

bool IsBanlance( Node *p)
{
    if ( p->right == NULL && p->right == NULL)
    {
        return true;
    }
    int left = Depth( p->left );
    int right = Depth( p->right);
    if (Abs(left - right) >1 )
    {
        return false;
    }
    return IsBalance( p->right) && IsBalance( p ->right );
}


18.对输入的字符串中的单词进行排序后输出，例如"bb aa cc"  -> "aa bb cc"
int GetWords(char *sentence,char *words[])
{
    int i=0;
    char *p;
    p=strtok(sentence," ");
    while(p!=NULL)
    {
        words[i]=p;
        i++;
        p=strtok(NULL," ");
         
    }
    return i;
}
void SortStrings(char *strs[],int count)
{
    char *p;
    int i,j,k;
    for(i=0;i<count;i++){
        for(j=i+1;j<count;j++)
        {
            if(strcmp(strs[i],strs[j])>0)
            {
                p=strs[i];
                strs[i]=strs[j];
                strs[j]=p;
            }
        }
    }
}


18.找出一个无序数组的中位数
关键点：那第一个数当轴，高位往低位走，比轴小的数交换到低位，比轴小的数交换到高位。轴最后归位
然后判断这个位置是不是数组的中间。如果在中间的左边，则在右边继续找
int partition(int a[], int low, int high)
{
 
    int q = a[low];

    while (low < high)
    {
 
         while (low < high && a[high] >= q)
   
          high--;

         a[low] = a[high];

         while (low < high && a[low] <= q)

         low++;

         a[high] = a[low];

     }
     a[low] = q;
     return low;

}
 

int findMidium(int a[], int n)

{
 
     int index = n / 2;

     int left = 0;

     int right = n - 1;

     int q = -1;

     while (index != q)
     {
 
 	q = partition(a, left, right);

 	if (q < index)

  	 	left = q + 1;
 
        else if (q>index)

  		 right = q - 1;

     }
     return a[index];
}


19 LRU 淘汰算法
单链表实现:
Node* LRU( int data )
{
    Node *p = head->next;
    Node *pre = head;
    int count = 0;
    while( p != NULL )
    {
       if ( p->data == data)
       {
            //找到了，将节点放在最前面
            pre->next = p->next;
            p->next = head->next;
            head->next = p;
            return p;
       }
       else
       {
	   //没找到
           if (p->next == NULL)
           {
               //长度超过了。删除最后一个节点   
               if (count >= MAX)
               {
		  pre->next = NULL;
                  delete p;
               }
	       Node *one = new Node;
               one->data = data;
               one->next = head->next;
               head->next = one;
	       p = NULL;
               return one;
           }
           else
           {
	       pre = p;
               p = p->next;
           }
           count++;
       }
    }
}


双容器实现:
map< int key, Node *p>_map;
void ReadData( int key )
{
    Node *p = (Node*)_map.find( key );
    print(p->data);
    if (p->next == NULL)
    {
       tail = p->pre;
    }
    Node *pre = p->pre;
    Node *pre->next = p->next;
    Node *next = p->next;
    next->pre = pre;
    p->pre = head;
    p->next = head->next;
}

void InsertData( int key, in data)
{
    _map,insert( key, data );
    Node *p = new Node;
    p->data = data;
    p->key = key;
    p->next = head->next;
    head->next = p;
    g_length++;
    if (g_length > MAX)
    {
        int key = tail->key;
         _map.earse(key);
        tail = tail->pre;
        tail->next = NULL; 
    }
}



20.快速排序
关键点：那第一个数当轴，高位往低位走，比轴小的数交换到低位，比轴小的数交换到高位。轴最后归位
void Qsort(int a[], int low, int high)
{
    if(low >= high)
    {
        return;
    }
    int first = low;
    int last = high;
    int key = a[first];/*用字表的第一个记录作为枢轴*/
 
    while(first < last)
    {
        while(first < last && a[last] >= key)
        {
            --last;
        }
 
        a[first] = a[last];/*将比第一个小的移到低端*/
 
        while(first < last && a[first] <= key)
        {
            ++first;
        }
         
        a[last] = a[first];   
        /*将比第一个大的移到高端*/
    }
    a[first] = key;/*枢轴记录到位*/
    Qsort(a, low, first-1);
    Qsort(a, first+1, high);
}
int main()
{
    int a[] = {57, 68, 59, 52, 72, 28, 96, 33, 24};
 
    Qsort(a, 0, sizeof(a) / sizeof(a[0]) - 1);/*这里原文第三个参数要减1否则内存越界*/
 
    for(int i = 0; i < sizeof(a) / sizeof(a[0]); i++)
    {
        cout << a[i] << "";
    }
     
    return 0;
}/*参考数据结构p274(清华大学出版社，严蔚敏)*/
 


 

21.非递归遍历2叉树
思路：2层循环。外层循环条件是指针非空并且栈不为空
循环内部：先将左子树全部循环进栈,进栈的都是有元素的，没有NULL，先序在这里直接访问，然后在出栈，只出一个，并把出栈的接到右子树上，中序在这里访问
2种模式都只有一个访问元素的地方


（先序）
void PreorderTraversal(BinTree BT)
{
	BinTree T;
	std::stack<BinTree> BtStack;
	T = BT;
	while (T || !BtStack.empty())
	{
		while (T)
		{
			BtStack.push(T);
			printf("%c ", T->Data);
			T = T->Left;
		}
		T = BtStack.top();
		BtStack.pop();
		T = T->Right;

	}
}

(中序)
void InorderTraversal(BinTree BT)
{
	BinTree T;
	std::stack<BinTree> BtStack;
	T = BT;
	while (T || !BtStack.empty())
	{
		while (T)
		{
			BtStack.push(T);
			T = T->Left;
		}
		T = BtStack.top();
		BtStack.pop();
		printf("%c ", T->Data);
		T = T->Right;

	}
}

 


22.堆排序
1.大顶堆的概念：一个完全二叉树，如果根节点比左右子树都要大，就是大顶堆。
大顶堆从数组上来说就是
arr[i] > a[2i+1] && arr[i] > a[2*i+2]

堆排序：首先将数组排成大顶堆，首先找到第一个非叶子节点，数组长度为n的话第一个叶子节点开始。从左往右。从下往上，将大的节点升到根节点。调整完后
检查是否符合大顶堆，如果是，则将根节点（最大元素）调到数组的最末尾。然后数组维度减一，然后递归再次进行这个过程，直到数组长度是1，这个元素就是最小的
元素，数组也就有序了。


23.特殊排序
对100万个数，所有的数都小于10万且大于0
int *p = new int[100000];
memet(p, 0, sizeof(int)*100000);
for(int i = 0; i<1000000;  i++)
{
     *(p+a[i]) = *(p+a[i]) + 1;
}

for (int i = 0; i<100000; i++)
{
    for( j =0; j<p[i]; j++)
    {
        count << i;      
    }
}


24.原地删除字符串
思路:双指针。是则赋值。不是则跳过
void del_space( char *str )
{
	int i = 0;
	char *p = str;
	while(*p)
	{   
		if ( *p !=  ' ' ) str[i++] = *p; 

		p++;
	}   
	str[i] = '\0';                                                                                                                                           
}


25.数组遍历求max(a[i] - a[j])
其实只要找到j前面那个最大的数就可以了。记为maxai;在遍历一遍的情况下记录下maxai
int maxCha( int a[], len )
{
	if (len < 2)
		return 0;

	int maxai = a[0];
	int max = a[1] - a[0];
	for( int j = 1; j<len; j++)
	{
		int i = j-1;	
		if (a[i] > maxai)
		{
			maxai = a[i];
		}
		if (a[j] - maxai > max)
		{
			max = a[j] - maxai;
		}
	}
	return max;
}


26 最短路径问题:
Dijkstra

Dijkstra核心思想是：如果确定一个顶点和起点是当前的最短路径，那么就可以确定这个点就是到起点的最短路径，
然后根据这个值min，去更新之前估算的最短路径的值dist[]中的值，这一步仅仅是更新估算值：

void Dijkstra()
{
   for( int i = 0; i<G.vnum i++)
   {
        int u = 0;
         //在没有确定的顶点里面找个最短的
 	for( int j = 0; j<G.vnum; j++)
        {
            if ( map[v0][j] < min && !vistied[j])
            {
                 dist[j] = min;
                 u = j;       
            }
        } 
        visited[u] = true;           
   }
   //根据这个u点。遍历所有点，找到一个能用这个最短路径找到一个点更新估算值   
   for（ int k = 0; k<G.vnum; k++）
   {
       if ( visited[k] == false && min + map[u][k] < dist[k])
       {
            dist[k] = min + map[u][k];
       }     
   }
}
