1.gc问题
引用计数，一个对象被别人引用，它自己的引用计数器+1，当别人赋值nil，它的引用计数器-1，当引用计数器是0的时候被回收
引用计数器不能解决循环引用问题，例如java代码：
 
object1 = new Object1;  //object1内部引用计数是1
object2 = new Object2; //object2内部引用计数是1

object1.ret = object2; //object2内部引用计数是2
object2.ret = object1; //object1内部引用计数是2

object1 = null;       //object1内部引用计数减为1
object2 = null;       //object2内部引用计数减为1

object1和object2都是nil无法追踪，引用计数都是1，没有消除，有内存泄露


2.三色标记法
分灰色。黑色。白色3个集合
黑色代表肯定不需要回收的对象，灰色代表还在考察的集合。白色代表需要回收的对象
首先遍历所有可以直接访问的对象(一个对象里面的子引用的对象不算)，遍历中发现一个对象被访问到了则置为灰色，也就是继续考察,如果一个对象的引用的所有对象都变成了灰色，那他就变成黑色移出队列,最后队列为空的时候。剩下的就是白色。也就是要删除的对象
最后清除白色对象


3.什么叫贪婪匹配
尽可能匹配到多的字符叫贪婪匹配，尽可能匹配到少的字符叫非贪婪匹配
match_str = 'abcdefc'
pattern = r'ab.*c'
re.match(pattern,match_str)
贪婪匹配到的是abcdefc

pattern = r'ab.*?c'
贪婪匹配到的是abc
re模块默认是贪婪模式；在量词后面直接加上一个问号？就是非贪婪模式。



